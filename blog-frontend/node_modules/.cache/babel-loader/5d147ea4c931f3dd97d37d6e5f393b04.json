{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { takeLatest } from 'redux-saga/effects';\nimport * as authAPI from '../lib/api/auth';\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; //새로고침 이후 임시 로그인 처리\n//회원 정보 확인\n\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes('user/CHECK');\nexport const tempSetUser = createAction(TEMP_SET_USER, user => user);\nexport const check = createAction(CHECK);\nconst checkSaga = createRequestSaga(CHECK, authAPI.check); //localstorage 안에 있는 user 값을 초기화\n\nfunction checkFailureSaga() {\n  try {\n    localStorage.removeItem('user');\n  } catch (e) {\n    console.log('local Storage is not working');\n  }\n}\n\nexport function* userSaga() {\n  yield takeLatest(CHECK, checkSaga);\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\n}\nconst initialState = {\n  user: null,\n  checkError: null\n};\nexport default handleActions({\n  [TEMP_SET_USER]: (state, _ref) => {\n    let {\n      payload: user\n    } = _ref;\n    return { ...state,\n      user\n    };\n  },\n  [CHECK_SUCCESS]: (state, _ref2) => {\n    let {\n      payload: user\n    } = _ref2;\n    return { ...state,\n      user,\n      checkError: null\n    };\n  },\n  [CHECK_FAILURE]: (state, _ref3) => {\n    let {\n      payload: error\n    } = _ref3;\n    return { ...state,\n      user: null,\n      checkError: error\n    };\n  }\n}, initialState);","map":{"version":3,"sources":["C:/Users/User/VCprac/blog/blog-frontend/src/modules/users.js"],"names":["createAction","handleActions","takeLatest","authAPI","createRequestSaga","createRequestActionTypes","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","tempSetUser","user","check","checkSaga","checkFailureSaga","localStorage","removeItem","e","console","log","userSaga","initialState","checkError","state","payload","error"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAAQC,UAAR,QAAyB,oBAAzB;AACA,OAAO,KAAKC,OAAZ,MAAyB,iBAAzB;AACA,OAAOC,iBAAP,IAA4BC,wBAA5B,QAA4D,0BAA5D;AAEA,MAAMC,aAAa,GAAC,oBAApB,C,CAA0C;AAC1C;;AACA,MAAM,CAACC,KAAD,EAAQC,aAAR,EAAuBC,aAAvB,IAAsCJ,wBAAwB,CAAC,YAAD,CAApE;AAEA,OAAO,MAAMK,WAAW,GAACV,YAAY,CAACM,aAAD,EAAgBK,IAAI,IAAEA,IAAtB,CAA9B;AACP,OAAO,MAAMC,KAAK,GAACZ,YAAY,CAACO,KAAD,CAAxB;AAEP,MAAMM,SAAS,GAACT,iBAAiB,CAACG,KAAD,EAAOJ,OAAO,CAACS,KAAf,CAAjC,C,CACA;;AACA,SAASE,gBAAT,GAA2B;AACzB,MAAG;AACDC,IAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACD,GAFD,CAEC,OAAMC,CAAN,EAAQ;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACD;AACF;;AAED,OAAO,UAAUC,QAAV,GAAoB;AACzB,QAAMlB,UAAU,CAACK,KAAD,EAAQM,SAAR,CAAhB;AACA,QAAMX,UAAU,CAACO,aAAD,EAAgBK,gBAAhB,CAAhB;AACD;AAGD,MAAMO,YAAY,GAAC;AACjBV,EAAAA,IAAI,EAAC,IADY;AACNW,EAAAA,UAAU,EAAC;AADL,CAAnB;AAIA,eAAerB,aAAa,CAC1B;AACE,GAACK,aAAD,GAAgB,CAACiB,KAAD;AAAA,QAAQ;AAACC,MAAAA,OAAO,EAACb;AAAT,KAAR;AAAA,WAA0B,EAAC,GAAGY,KAAJ;AAAWZ,MAAAA;AAAX,KAA1B;AAAA,GADlB;AAEE,GAACH,aAAD,GAAgB,CAACe,KAAD;AAAA,QAAQ;AAACC,MAAAA,OAAO,EAACb;AAAT,KAAR;AAAA,WAA0B,EAAC,GAAGY,KAAJ;AAAWZ,MAAAA,IAAX;AAAgBW,MAAAA,UAAU,EAAC;AAA3B,KAA1B;AAAA,GAFlB;AAGE,GAACb,aAAD,GAAgB,CAACc,KAAD;AAAA,QAAQ;AAACC,MAAAA,OAAO,EAACC;AAAT,KAAR;AAAA,WAA2B,EAAC,GAAGF,KAAJ;AAAWZ,MAAAA,IAAI,EAAC,IAAhB;AAAqBW,MAAAA,UAAU,EAACG;AAAhC,KAA3B;AAAA;AAHlB,CAD0B,EAM1BJ,YAN0B,CAA5B","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\r\nimport {takeLatest} from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\r\n\r\nconst TEMP_SET_USER='user/TEMP_SET_USER'; //새로고침 이후 임시 로그인 처리\r\n//회원 정보 확인\r\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE]=createRequestActionTypes('user/CHECK');\r\n\r\nexport const tempSetUser=createAction(TEMP_SET_USER, user=>user);\r\nexport const check=createAction(CHECK);\r\n\r\nconst checkSaga=createRequestSaga(CHECK,authAPI.check);\r\n//localstorage 안에 있는 user 값을 초기화\r\nfunction checkFailureSaga(){\r\n  try{\r\n    localStorage.removeItem('user');\r\n  }catch(e){\r\n    console.log('local Storage is not working');\r\n  }\r\n}\r\n\r\nexport function* userSaga(){\r\n  yield takeLatest(CHECK, checkSaga);\r\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\r\n}\r\n\r\n\r\nconst initialState={\r\n  user:null, checkError:null\r\n}\r\n\r\nexport default handleActions(\r\n  {\r\n    [TEMP_SET_USER]:(state, {payload:user})=>({...state, user}),\r\n    [CHECK_SUCCESS]:(state, {payload:user})=>({...state, user,checkError:null}),\r\n    [CHECK_FAILURE]:(state, {payload:error})=>({...state, user:null,checkError:error}),\r\n  },\r\n  initialState\r\n)"]},"metadata":{},"sourceType":"module"}