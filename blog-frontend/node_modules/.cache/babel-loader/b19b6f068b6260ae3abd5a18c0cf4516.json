{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport { startLoading, finishLoading } from '../modules/loading';\nexport const createRequestActionTypes = type => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n  return [type, SUCCESS, FAILURE];\n};\nexport default function createRequestSaga(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n  return function* (action) {\n    yield put(startLoading(type));\n\n    try {\n      const response = yield call(request, action.payload);\n      yield put({\n        type: SUCCESS,\n        payload: response.data\n      });\n    } catch (e) {\n      yield put({\n        type: FAILURE,\n        payload: e,\n        error: true\n      });\n    }\n\n    yield put(finishLoading(type));\n  };\n}","map":{"version":3,"sources":["C:/Users/User/VCprac/blog/blog-frontend/src/lib/createRequestSaga.js"],"names":["call","put","startLoading","finishLoading","createRequestActionTypes","type","SUCCESS","FAILURE","createRequestSaga","request","action","response","payload","data","e","error"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,GAAd,QAAwB,oBAAxB;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,oBAA5C;AAEA,OAAO,MAAMC,wBAAwB,GAACC,IAAI,IAAE;AAC1C,QAAMC,OAAO,GAAE,GAAED,IAAK,UAAtB;AACA,QAAME,OAAO,GAAE,GAAEF,IAAK,UAAtB;AACA,SAAO,CAACA,IAAD,EAAOC,OAAP,EAAgBC,OAAhB,CAAP;AACD,CAJM;AAMP,eAAe,SAASC,iBAAT,CAA2BH,IAA3B,EAAiCI,OAAjC,EAAyC;AACtD,QAAMH,OAAO,GAAE,GAAED,IAAK,UAAtB;AACA,QAAME,OAAO,GAAE,GAAEF,IAAK,UAAtB;AAGA,SAAO,WAAUK,MAAV,EAAiB;AACtB,UAAMT,GAAG,CAACC,YAAY,CAACG,IAAD,CAAb,CAAT;;AACA,QAAG;AACD,YAAMM,QAAQ,GAAC,MAAMX,IAAI,CAACS,OAAD,EAAUC,MAAM,CAACE,OAAjB,CAAzB;AACA,YAAMX,GAAG,CAAC;AACRI,QAAAA,IAAI,EAACC,OADG;AACMM,QAAAA,OAAO,EAACD,QAAQ,CAACE;AADvB,OAAD,CAAT;AAGD,KALD,CAKC,OAAMC,CAAN,EAAQ;AACP,YAAMb,GAAG,CAAC;AACRI,QAAAA,IAAI,EAACE,OADG;AACMK,QAAAA,OAAO,EAACE,CADd;AACiBC,QAAAA,KAAK,EAAC;AADvB,OAAD,CAAT;AAGD;;AACD,UAAMd,GAAG,CAACE,aAAa,CAACE,IAAD,CAAd,CAAT;AACD,GAbD;AAcD","sourcesContent":["import {call, put} from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport const createRequestActionTypes=type=>{\r\n  const SUCCESS=`${type}_SUCCESS`;\r\n  const FAILURE=`${type}_FAILURE`;\r\n  return [type, SUCCESS, FAILURE];\r\n}\r\n\r\nexport default function createRequestSaga(type, request){\r\n  const SUCCESS=`${type}_SUCCESS`;\r\n  const FAILURE=`${type}_FAILURE`;\r\n\r\n\r\n  return function*(action){\r\n    yield put(startLoading(type));\r\n    try{\r\n      const response=yield call(request, action.payload);\r\n      yield put({\r\n        type:SUCCESS, payload:response.data\r\n      })\r\n    }catch(e){\r\n      yield put({\r\n        type:FAILURE, payload:e, error:true\r\n      })\r\n    }\r\n    yield put(finishLoading(type));\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}