{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as authAPI from '../lib/api/auth';\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes('auth/REGISTER');\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes('auth/LOGIN'); // const REGISTER='auth/REGISTER';\n// const REGISTER_SUCCESS='auth/REGISTER_SUCCESS';\n// const REGISTER_FAILURE='auth/REGISTER_FAILURE';\n// const LOGIN='auth/LOGIN';\n// const LOGIN_SUCCESS='auth/LOGIN_SUCCESS';\n// const LOGIN_FAILURE='auth/LOGIN_FAILURE';\n\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    form,\n    key,\n    value\n  } = _ref;\n  return {\n    form,\n    //register, login\n    key,\n    //username, password, passwordConfirm\n    value //실제 바꾸려는 값\n\n  };\n});\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form); //register\n\nexport const register = createAction(REGISTER, _ref2 => {\n  let {\n    username,\n    password\n  } = _ref2;\n  return {\n    username,\n    password\n  };\n});\nexport const login = createAction(LOGIN, _ref3 => {\n  let {\n    username,\n    password\n  } = _ref3;\n  return {\n    username,\n    password\n  };\n}); //사가 생성\n\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n}\nconst initialState = {\n  register: {\n    username: '',\n    password: '',\n    passwordConfirm: ''\n  },\n  login: {\n    username: '',\n    password: ''\n  },\n  auth: null,\n  authError: null\n};\nconst auth = handleActions({\n  [CHANGE_FIELD]: (state, _ref4) => {\n    let {\n      payload: {\n        form,\n        key,\n        value\n      }\n    } = _ref4;\n    return produce(state, draft => {\n      draft[form][key] = value; //ex: state.register.username을 바꾼다\n    });\n  },\n  [INITIALIZE_FORM]: (state, _ref5) => {\n    let {\n      payload: form\n    } = _ref5;\n    return { ...state,\n      [form]: initialState[form],\n      authError: null //폼 전환 시 회원 인증 에러 초기화\n\n    };\n  },\n  [REGISTER_SUCCESS]: (state, _ref6) => {\n    let {\n      payload: auth\n    } = _ref6;\n    return { ...state,\n      authError: null,\n      auth\n    };\n  },\n  [REGISTER_FAILURE]: (state, _ref7) => {\n    let {\n      payload: error\n    } = _ref7;\n    return { ...state,\n      authError: error\n    };\n  },\n  [LOGIN_SUCCESS]: (state, _ref8) => {\n    let {\n      payload: auth\n    } = _ref8;\n    return { ...state,\n      authError: null,\n      auth\n    };\n  },\n  [LOGIN_FAILURE]: (state, _ref9) => {\n    let {\n      payload: error\n    } = _ref9;\n    return { ...state,\n      authError: error\n    };\n  }\n}, initialState);\nexport default auth;","map":{"version":3,"sources":["C:/Users/User/VCprac/blog/blog-frontend/src/modules/auth.js"],"names":["createAction","handleActions","produce","takeLatest","createRequestSaga","createRequestActionTypes","authAPI","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","username","password","login","registerSaga","loginSaga","authSaga","initialState","passwordConfirm","auth","authError","state","payload","draft","error"],"mappings":"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","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\r\nimport produce from 'immer';\r\nimport {takeLatest} from 'redux-saga/effects';\r\nimport createRequestSaga,{createRequestActionTypes} from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD='auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM='auth/INITIALIZE_FORM';\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE]=createRequestActionTypes(\r\n  'auth/REGISTER'\r\n)\r\n\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE]=createRequestActionTypes(\r\n  'auth/LOGIN'\r\n)\r\n\r\n// const REGISTER='auth/REGISTER';\r\n// const REGISTER_SUCCESS='auth/REGISTER_SUCCESS';\r\n// const REGISTER_FAILURE='auth/REGISTER_FAILURE';\r\n\r\n// const LOGIN='auth/LOGIN';\r\n// const LOGIN_SUCCESS='auth/LOGIN_SUCCESS';\r\n// const LOGIN_FAILURE='auth/LOGIN_FAILURE';\r\n\r\nexport const changeField=createAction(\r\n  CHANGE_FIELD,\r\n  ({form, key, value})=>({\r\n    form, //register, login\r\n    key, //username, password, passwordConfirm\r\n    value, //실제 바꾸려는 값\r\n  })\r\n);\r\n\r\nexport const initializeForm=createAction(INITIALIZE_FORM, form=>form);  //register\r\n\r\nexport const register=createAction(REGISTER, ({username, password})=>({\r\n  username, password\r\n}));\r\nexport const login=createAction(LOGIN, ({username, password})=>({\r\n  username, password\r\n}))\r\n\r\n//사가 생성\r\nconst registerSaga=createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga=createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga(){\r\n  yield takeLatest(REGISTER, registerSaga);\r\n  yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState={\r\n  register:{\r\n    username:'',\r\n    password:'',\r\n    passwordConfirm:''\r\n  },\r\n  login:{\r\n    username:'',\r\n    password:''\r\n  },\r\n  auth:null, authError:null\r\n};\r\n\r\nconst auth=handleActions({\r\n  [CHANGE_FIELD]:(state, {payload:{form, key, value}})=>\r\n    produce(state, draft=>{\r\n      draft[form][key]=value; //ex: state.register.username을 바꾼다\r\n    }),\r\n    [INITIALIZE_FORM]:(state, {payload:form})=>({\r\n      ...state,\r\n      [form]:initialState[form],\r\n      authError:null  //폼 전환 시 회원 인증 에러 초기화\r\n    }),\r\n    [REGISTER_SUCCESS]:(state, {payload:auth})=>({\r\n      ...state, authError:null, auth\r\n    }),\r\n    [REGISTER_FAILURE]:(state, {payload:error})=>({\r\n      ...state, authError:error\r\n    }),\r\n    [LOGIN_SUCCESS]:(state, {payload:auth})=>({\r\n      ...state, authError:null, auth\r\n    }),\r\n    [LOGIN_FAILURE]:(state, {payload:error})=>({\r\n      ...state, authError:error\r\n    }),\r\n}, initialState\r\n)\r\n\r\nexport default auth;"]},"metadata":{},"sourceType":"module"}