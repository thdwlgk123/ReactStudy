{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\VCprac\\\\blog\\\\blog-frontend\\\\src\\\\containers\\\\auth\\\\RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField, initializeForm, register } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/users';\nimport { withRouter } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RegisterForm = _ref => {\n  _s();\n\n  let {\n    history\n  } = _ref;\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const {\n    form,\n    auth,\n    authError,\n    user\n  } = useSelector(_ref2 => {\n    let {\n      auth,\n      user\n    } = _ref2;\n    return {\n      form: auth.register,\n      auth: auth.auth,\n      authError: auth.authError,\n      user: user.user\n    };\n  }); //인풋 변경 이벤트 핸들러\n\n  const onChange = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    dispatch(changeField({\n      form: 'register',\n      key: name,\n      value\n    }));\n  }; //폼 등록 이벤트 핸들러\n\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const {\n      username,\n      password,\n      passwordConfirm\n    } = form; //입력하지 않은 칸 있을 시\n\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요');\n      return;\n    }\n\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      changeField({\n        form: 'register',\n        key: 'password',\n        value: ''\n      });\n      changeField({\n        form: 'register',\n        key: 'passwordConfirm',\n        value: ''\n      });\n      return;\n    }\n\n    dispatch(register({\n      username,\n      password\n    }));\n  }; //컴포넌트가 처음 렌더링될 때 form 을 초기화함\n\n\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]); //회원가입 성공/실패 처리\n\n  useEffect(() => {\n    if (authError) {\n      if (authError.response.status === 409) {\n        setError('이미 존재하는 아이디입니다.');\n        return;\n      } //기타 이유\n\n\n      setError('회원가입 실패');\n      return;\n    }\n\n    if (auth) {\n      console.log('회원가입 성공');\n      console.log(auth);\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]); //user 값이 잘 설정되었는지 확인\n\n  useEffect(() => {\n    if (user) {\n      // console.log('checkAPI 성공');\n      console.log(user);\n      history.push('/');\n    }\n  }, [history, user]);\n  return /*#__PURE__*/_jsxDEV(AuthForm, {\n    type: \"register\",\n    form: form,\n    onChange: onChange,\n    onSubmit: onSubmit,\n    error: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterForm, \"orEhITsghKDOmRWPcmtOJ1Es0ts=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = RegisterForm;\nexport default _c2 = withRouter(RegisterForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RegisterForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/User/VCprac/blog/blog-frontend/src/containers/auth/RegisterForm.js"],"names":["React","useEffect","useState","useDispatch","useSelector","changeField","initializeForm","register","AuthForm","check","withRouter","RegisterForm","history","error","setError","dispatch","form","auth","authError","user","onChange","e","value","name","target","key","onSubmit","preventDefault","username","password","passwordConfirm","includes","response","status","console","log","push"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeField, initializeForm, register } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/users';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst RegisterForm=({history})=>{\r\n  const [error, setError]=useState(null);\r\n  const dispatch=useDispatch();\r\n  const {form,auth,authError,user}=useSelector(({auth, user})=>({\r\n    form: auth.register,\r\n    auth:auth.auth,\r\n    authError:auth.authError,\r\n    user:user.user\r\n  }));\r\n  //인풋 변경 이벤트 핸들러\r\n  const onChange=e=>{\r\n    const {value, name}=e.target;\r\n    dispatch(\r\n      changeField({\r\n        form:'register', key:name, value\r\n      })\r\n    )\r\n  };\r\n  //폼 등록 이벤트 핸들러\r\n  const onSubmit=e=>{\r\n    e.preventDefault();\r\n    const {username, password, passwordConfirm}=form;\r\n    //입력하지 않은 칸 있을 시\r\n    if([username, password, passwordConfirm].includes('')){\r\n      setError('빈 칸을 모두 입력하세요');\r\n      return;\r\n    }\r\n    if(password!==passwordConfirm){\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      changeField({form:'register', key:'password',value:''});\r\n      changeField({form:'register', key:'passwordConfirm',value:''});\r\n      return;\r\n    }\r\n    dispatch(register({username,password}))\r\n  }\r\n  //컴포넌트가 처음 렌더링될 때 form 을 초기화함\r\n  useEffect(()=>{\r\n    dispatch(initializeForm('register'))\r\n  }, [dispatch]);\r\n//회원가입 성공/실패 처리\r\nuseEffect(()=>{\r\n  if(authError){\r\n    if(authError.response.status===409){\r\n      setError('이미 존재하는 아이디입니다.');\r\n      return;\r\n    }\r\n    //기타 이유\r\n    setError('회원가입 실패');\r\n    return;\r\n  }\r\n  if(auth){\r\n    console.log('회원가입 성공');\r\n    console.log(auth);\r\n    dispatch(check());\r\n  }\r\n}, [auth, authError, dispatch]);\r\n\r\n//user 값이 잘 설정되었는지 확인\r\nuseEffect(()=>{\r\n  if(user){\r\n    // console.log('checkAPI 성공');\r\n    console.log(user);\r\n    history.push('/');\r\n  }\r\n},[history, user]);\r\n\r\n  return(\r\n    <AuthForm type='register' form={form} onChange={onChange} onSubmit={onSubmit} error={error}/>\r\n  )\r\n}\r\n\r\nexport default withRouter(RegisterForm);"]},"metadata":{},"sourceType":"module"}