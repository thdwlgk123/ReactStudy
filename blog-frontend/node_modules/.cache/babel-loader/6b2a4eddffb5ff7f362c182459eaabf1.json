{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'write/INITIALIZE'; //모든 내용 초기화\n\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; //특정 key 값 바꾸기\n\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE] = createRequestActionTypes('write/WRITE_POST');\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    key,\n    value\n  } = _ref;\n  return {\n    key,\n    value\n  };\n});\nexport const writePost = createAction(WRITE_POST, _ref2 => {\n  let {\n    title,\n    body,\n    tags\n  } = _ref2;\n  return {\n    title,\n    body,\n    tags\n  };\n}); //saga 생성\n\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n}\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null\n};\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  //initialstate를 넣으면 초기 상태로 바뀜\n  [CHANGE_FIELD]: (state, _ref3) => {\n    let {\n      payload: {\n        key,\n        value\n      }\n    } = _ref3;\n    return { ...state,\n      [key]: value //특정 key 값 업데이트\n\n    };\n  },\n  [WRITE_POST]: state => ({ ...state,\n    post: null,\n    postError: null\n  }),\n  [WRITE_POST_SUCCESS]: (state, _ref4) => {\n    let {\n      payload: post\n    } = _ref4;\n    return { ...state,\n      post\n    };\n  },\n  [WRITE_POST_FAILURE]: (state, _ref5) => {\n    let {\n      payload: postError\n    } = _ref5;\n    return { ...state,\n      postError\n    };\n  }\n}, initialState);\nexport default write;","map":{"version":3,"sources":["C:/Users/User/VCprac/blog/blog-frontend/src/modules/write.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","initialize","changeField","key","value","writePost","title","body","tags","writePostSaga","writeSaga","initialState","post","postError","write","state","payload"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IAA0BC,wBAA1B,QAAyD,0BAAzD;AACA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAAQC,UAAR,QAAyB,oBAAzB;AAEA,MAAMC,UAAU,GAAC,kBAAjB,C,CAAsC;;AACtC,MAAMC,YAAY,GAAC,oBAAnB,C,CAAwC;;AACxC,MAAM,CAACC,UAAD,EAAaC,kBAAb,EAAiCC,kBAAjC,IAAqDP,wBAAwB,CAAC,kBAAD,CAAnF;AAEA,OAAO,MAAMQ,UAAU,GAACX,YAAY,CAACM,UAAD,CAA7B;AACP,OAAO,MAAMM,WAAW,GAACZ,YAAY,CAACO,YAAD,EACb;AAAA,MAAC;AAACM,IAAAA,GAAD;AAAMC,IAAAA;AAAN,GAAD;AAAA,SAAiB;AAACD,IAAAA,GAAD;AAAMC,IAAAA;AAAN,GAAjB;AAAA,CADa,CAA9B;AAEP,OAAO,MAAMC,SAAS,GAACf,YAAY,CAACQ,UAAD,EAAa;AAAA,MAAC;AAACQ,IAAAA,KAAD;AAAQC,IAAAA,IAAR;AAAcC,IAAAA;AAAd,GAAD;AAAA,SAAwB;AACtEF,IAAAA,KADsE;AAC/DC,IAAAA,IAD+D;AACzDC,IAAAA;AADyD,GAAxB;AAAA,CAAb,CAA5B,C,CAIP;;AACA,MAAMC,aAAa,GAACjB,iBAAiB,CAACM,UAAD,EAAYJ,QAAQ,CAACW,SAArB,CAArC;AACA,OAAO,UAAUK,SAAV,GAAqB;AAC1B,QAAMf,UAAU,CAACG,UAAD,EAAaW,aAAb,CAAhB;AACD;AACD,MAAME,YAAY,GAAC;AACjBL,EAAAA,KAAK,EAAC,EADW;AACRC,EAAAA,IAAI,EAAC,EADG;AACAC,EAAAA,IAAI,EAAC,EADL;AACSI,EAAAA,IAAI,EAAC,IADd;AACoBC,EAAAA,SAAS,EAAC;AAD9B,CAAnB;AAIA,MAAMC,KAAK,GAACvB,aAAa,CACvB;AACE,GAACK,UAAD,GAAamB,KAAK,IAAEJ,YADtB;AACoC;AAClC,GAACd,YAAD,GAAe,CAACkB,KAAD;AAAA,QAAO;AAACC,MAAAA,OAAO,EAAC;AAACb,QAAAA,GAAD;AAAKC,QAAAA;AAAL;AAAT,KAAP;AAAA,WAAgC,EAC7C,GAAGW,KAD0C;AAE7C,OAACZ,GAAD,GAAMC,KAFuC,CAEjC;;AAFiC,KAAhC;AAAA,GAFjB;AAME,GAACN,UAAD,GAAaiB,KAAK,KAAG,EAAC,GAAGA,KAAJ;AAAWH,IAAAA,IAAI,EAAC,IAAhB;AAAsBC,IAAAA,SAAS,EAAC;AAAhC,GAAH,CANpB;AAOE,GAACd,kBAAD,GAAqB,CAACgB,KAAD;AAAA,QAAO;AAACC,MAAAA,OAAO,EAACJ;AAAT,KAAP;AAAA,WAAyB,EAC5C,GAAGG,KADyC;AAClCH,MAAAA;AADkC,KAAzB;AAAA,GAPvB;AAUE,GAACZ,kBAAD,GAAsB,CAACe,KAAD;AAAA,QAAO;AAACC,MAAAA,OAAO,EAACH;AAAT,KAAP;AAAA,WAA8B,EAClD,GAAGE,KAD+C;AACxCF,MAAAA;AADwC,KAA9B;AAAA;AAVxB,CADuB,EAcpBF,YAdoB,CAAzB;AAiBA,eAAeG,KAAf","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga,{createRequestActionTypes} from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport {takeLatest} from 'redux-saga/effects';\r\n\r\nconst INITIALIZE='write/INITIALIZE';  //모든 내용 초기화\r\nconst CHANGE_FIELD='write/CHANGE_FIELD' //특정 key 값 바꾸기\r\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE]=createRequestActionTypes('write/WRITE_POST');\r\n\r\nexport const initialize=createAction(INITIALIZE);\r\nexport const changeField=createAction(CHANGE_FIELD, \r\n                        ({key, value})=>({key, value}));\r\nexport const writePost=createAction(WRITE_POST, ({title, body, tags})=>({\r\n  title, body, tags\r\n}))\r\n\r\n//saga 생성\r\nconst writePostSaga=createRequestSaga(WRITE_POST,postsAPI.writePost);\r\nexport function* writeSaga(){\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n}\r\nconst initialState={\r\n  title:'',body:'',tags:[], post:null, postError:null\r\n};\r\n\r\nconst write=handleActions(\r\n  {\r\n    [INITIALIZE]:state=>initialState, //initialstate를 넣으면 초기 상태로 바뀜\r\n    [CHANGE_FIELD]:(state,{payload:{key,value}})=>({\r\n      ...state,\r\n      [key]:value //특정 key 값 업데이트\r\n    }),\r\n    [WRITE_POST]:state=>({...state, post:null, postError:null}),\r\n    [WRITE_POST_SUCCESS]:(state,{payload:post})=>({\r\n      ...state, post\r\n    }),\r\n    [WRITE_POST_FAILURE ]:(state,{payload:postError})=>({\r\n      ...state, postError\r\n    })\r\n  }, initialState\r\n)\r\n\r\nexport default write;"]},"metadata":{},"sourceType":"module"}