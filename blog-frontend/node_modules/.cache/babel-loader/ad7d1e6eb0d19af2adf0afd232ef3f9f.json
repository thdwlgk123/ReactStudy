{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'write/INITIALIZE'; //모든 내용 초기화\n\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; //특정 key 값 바꾸기\n\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE] = createRequestActionTypes('write/WRITE_POST');\nconst [UPDATE_POST, UPDATE_POST_SUCCESS, UPDATE_POST_FAILURE] = createRequestActionTypes('write/UPDATE_POST');\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    key,\n    value\n  } = _ref;\n  return {\n    key,\n    value\n  };\n});\nexport const writePost = createAction(WRITE_POST, _ref2 => {\n  let {\n    title,\n    body,\n    tags\n  } = _ref2;\n  return {\n    title,\n    body,\n    tags\n  };\n});\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\nexport const updatePost = createAction(UPDATE_POST, _ref3 => {\n  let {\n    id,\n    title,\n    body,\n    tags\n  } = _ref3;\n  return {\n    id,\n    title,\n    body,\n    tags\n  };\n}); //saga 생성\n\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null,\n  originalPostId: null\n};\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  //initialstate를 넣으면 초기 상태로 바뀜\n  [CHANGE_FIELD]: (state, _ref4) => {\n    let {\n      payload: {\n        key,\n        value\n      }\n    } = _ref4;\n    return { ...state,\n      [key]: value //특정 key 값 업데이트\n\n    };\n  },\n  [WRITE_POST]: state => ({ ...state,\n    post: null,\n    postError: null\n  }),\n  [WRITE_POST_SUCCESS]: (state, _ref5) => {\n    let {\n      payload: post\n    } = _ref5;\n    return { ...state,\n      post\n    };\n  },\n  [WRITE_POST_FAILURE]: (state, _ref6) => {\n    let {\n      payload: postError\n    } = _ref6;\n    return { ...state,\n      postError\n    };\n  },\n  [SET_ORIGINAL_POST]: (state, _ref7) => {\n    let {\n      payload: post\n    } = _ref7;\n    return { ...state,\n      title: post.title,\n      body: post.body,\n      tags: post.tags,\n      originalPostId: post._id\n    };\n  },\n  [UPDATE_POST_SUCCESS]: (state, _ref8) => {\n    let {\n      payload: post\n    } = _ref8;\n    return { ...state,\n      post\n    };\n  },\n  [UPDATE_POST_FAILURE]: (state, _ref9) => {\n    let {\n      payload: postError\n    } = _ref9;\n    return { ...state,\n      postError\n    };\n  }\n}, initialState);\nexport default write;","map":{"version":3,"sources":["C:/Users/User/VCprac/blog/blog-frontend/src/modules/write.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","SET_ORIGINAL_POST","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","changeField","key","value","writePost","title","body","tags","setOriginalPost","post","updatePost","id","writePostSaga","updatePostSaga","writeSaga","initialState","postError","originalPostId","write","state","payload","_id"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga,{createRequestActionTypes} from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport {takeLatest} from 'redux-saga/effects';\r\n\r\nconst INITIALIZE='write/INITIALIZE';  //모든 내용 초기화\r\nconst CHANGE_FIELD='write/CHANGE_FIELD'; //특정 key 값 바꾸기\r\nconst SET_ORIGINAL_POST='write/SET_ORIGINAL_POST';\r\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE]=createRequestActionTypes('write/WRITE_POST');\r\nconst [UPDATE_POST,UPDATE_POST_SUCCESS,UPDATE_POST_FAILURE ]=createRequestActionTypes('write/UPDATE_POST');\r\n\r\nexport const initialize=createAction(INITIALIZE);\r\nexport const changeField=createAction(CHANGE_FIELD, \r\n                        ({key, value})=>({key, value}));\r\nexport const writePost=createAction(WRITE_POST, ({title, body, tags})=>({\r\n  title, body, tags\r\n}))\r\nexport const setOriginalPost=createAction(SET_ORIGINAL_POST, post=>post);\r\nexport const updatePost=createAction(UPDATE_POST,\r\n  ({id,title,body,tags})=>({\r\n    id,\r\n    title,\r\n    body,\r\n    tags\r\n  }))\r\n\r\n//saga 생성\r\nconst writePostSaga=createRequestSaga(WRITE_POST,postsAPI.writePost);\r\nconst updatePostSaga=createRequestSaga(UPDATE_POST, postsAPI.updatePost);\r\n\r\nexport function* writeSaga(){\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n  yield takeLatest(UPDATE_POST, updatePostSaga);\r\n}\r\nconst initialState={\r\n  title:'',body:'',tags:[], post:null, postError:null,\r\n  originalPostId:null\r\n};\r\n\r\nconst write=handleActions(\r\n  {\r\n    [INITIALIZE]:state=>initialState, //initialstate를 넣으면 초기 상태로 바뀜\r\n    [CHANGE_FIELD]:(state,{payload:{key,value}})=>({\r\n      ...state,\r\n      [key]:value //특정 key 값 업데이트\r\n    }),\r\n    [WRITE_POST]:state=>({...state, post:null, postError:null}),\r\n    [WRITE_POST_SUCCESS]:(state,{payload:post})=>({\r\n      ...state, post\r\n    }),\r\n    [WRITE_POST_FAILURE ]:(state,{payload:postError})=>({\r\n      ...state, postError\r\n    }),\r\n    [SET_ORIGINAL_POST]:(state, {payload:post})=>({\r\n      ...state, \r\n      title:post.title, \r\n      body:post.body,\r\n      tags:post.tags,\r\n      originalPostId:post._id\r\n    }),\r\n    [UPDATE_POST_SUCCESS]:(state,{payload:post})=>({\r\n      ...state, post\r\n    }),\r\n    [UPDATE_POST_FAILURE]:(state,{payload:postError})=>({\r\n      ...state, postError\r\n    })\r\n  }, initialState\r\n)\r\n\r\nexport default write;"]},"metadata":{},"sourceType":"module"}